AWSTemplateFormatVersion: "2010-09-09"

Description: Amazon Transcribe Post Call Analytics - PCA Server - PCA State Machine

Transform: AWS::Serverless-2016-10-31

Parameters:
  TableName:
    Type: String

  FFMPEGZipName:
    Type: String
    Default: ffmpeg.zip

  MPLZipName:
    Type: String
    Default: matplotlib-layer.zip

  Boto3Layer:
    Type: String

  PyUtilsLayer:
    Type: String

  SupportFilesBucketName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: SupportFilesBucketName

  StepFunctionName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: StepFunctionName
    
  InputBucketName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: InputBucketName

  PostProcessingLambdaARN:
    Type: String
    Default: ''

Condition: 
  ShouldEnablePostProcessingLambda: !NotEquals [!Ref PostProcessingLambdaARN, ""]

Globals:
  Function:
    Runtime: python3.8
    MemorySize: 128
    Timeout: 15

Resources:
  FFMPEGLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      Content:
        S3Bucket: !Ref SupportFilesBucketName
        S3Key: !Ref FFMPEGZipName

  MPLLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - python3.8
        - python3.9
      Content:
        S3Bucket: !Ref SupportFilesBucketName
        S3Key: !Ref MPLZipName

  TranscribeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - transcribe.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  TranscribeLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
      Policies:
        - PolicyName: PassRoleToTranscribe
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt TranscribeRole.Arn
        - PolicyName: S3BucketReadWritePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${InputBucketName}
                  - !Sub arn:aws:s3:::${InputBucketName}/*
        - PolicyName: SSMGetParameterPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*


  SFStartTranscribeJob:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri:  ../../src/pca
      Handler: pca-aws-sf-start-transcribe-job.lambda_handler
      Timeout: 30
      Layers:
        - !Ref FFMPEGLayer
        - !Ref Boto3Layer
      Environment:
        Variables:
          RoleArn: !GetAtt TranscribeRole.Arn
          AWS_DATA_PATH: "/opt/models"
      Role: !GetAtt TranscribeLambdaRole.Arn

  SFProcessTurn:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri:  ../../src/pca
      Handler: pca-aws-sf-process-turn-by-turn.lambda_handler
      MemorySize: 192
      Timeout: 600
      Layers:
        - !Ref FFMPEGLayer
        - !Ref MPLLayer
        - !Ref Boto3Layer
      Environment:
        Variables:
          AWS_DATA_PATH: "/opt/models"
      Policies:
        - arn:aws:iam::aws:policy/AmazonTranscribeReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/ComprehendFullAccess
        - arn:aws:iam::aws:policy/AmazonKendraFullAccess

  SFFinalProcessing:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri:  ../../src/pca
      Handler: pca-aws-sf-post-processing.lambda_handler
      Layers:
        - !Ref Boto3Layer
      Environment:
        Variables:
          AWS_DATA_PATH: "/opt/models"
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  SFCTRGenesys:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri:  ../../src/pca
      Handler: pca-aws-sf-ctr-genesys.lambda_handler
      Layers:
        - !Ref Boto3Layer
      Environment:
        Variables:
          AWS_DATA_PATH: "/opt/models"
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  SFPostCTRProcessing:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri:  ../../src/pca
      Handler: pca-aws-sf-post-ctr-processing.lambda_handler
      Layers:
        - !Ref Boto3Layer
      Environment:
        Variables:
          AWS_DATA_PATH: "/opt/models"
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - !If ShouldEnablePostProcessingLambda
          PolicyName: AllowInvokePostProcessLambda
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
              - !Ref PostProcessingLambdaARN
        
  SFAwaitNotification:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri:  ../../src/pca
      Handler: pca-aws-sf-wait-for-transcribe-notification.lambda_handler
      Timeout: 10
      Environment:
        Variables:
          TableName: !Ref TableName
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  SFTranscribeFailed:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri:  ../../src/pca
      Handler: pca-aws-sf-transcribe-failed.lambda_handler
      Environment:
        Variables:
          RoleArn: !GetAtt TranscribeRole.Arn
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '/aws/vendedlogs/${StepFunctionName}'
      RetentionInDays: 90

  Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowInvokeFunctions
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt SFProcessTurn.Arn
                  - !GetAtt SFStartTranscribeJob.Arn
                  - !GetAtt SFAwaitNotification.Arn
                  - !GetAtt SFTranscribeFailed.Arn
                  - !GetAtt SFFinalProcessing.Arn
                  - !GetAtt SFCTRGenesys.Arn
                  - !GetAtt SFPostCTRProcessing.Arn
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogDelivery
              - logs:GetLogDelivery
              - logs:UpdateLogDelivery
              - logs:DeleteLogDelivery
              - logs:ListLogDeliveries
              - logs:PutResourcePolicy
              - logs:DescribeResourcePolicies
              - logs:DescribeLogGroups
              Resource: "*"

  StateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Ref StepFunctionName
      DefinitionS3Location: ./pca-definition.json
      DefinitionSubstitutions:
        SFProcessTurnArn: !GetAtt SFProcessTurn.Arn
        SFStartTranscribeJobArn: !GetAtt SFStartTranscribeJob.Arn
        SFAwaitNotificationArn: !GetAtt SFAwaitNotification.Arn
        SFTranscribeFailedArn: !GetAtt SFTranscribeFailed.Arn
        SFFinalProcessingArn: !GetAtt SFFinalProcessing.Arn
        SFCTRGenesysArn: !GetAtt SFCTRGenesys.Arn
        SFPostCTRProcessingArn: !GetAtt SFPostCTRProcessing.Arn
      LoggingConfiguration:
        Level: ERROR
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt LogGroup.Arn
      RoleArn: !GetAtt Role.Arn

Outputs:

  RolesForKMSKey:
    Value: !Join
      - ', '
      - - !Sub '"${TranscribeLambdaRole.Arn}"'
        - !Sub '"${TranscribeRole.Arn}"'
        - !Sub '"${SFProcessTurnRole.Arn}"'
        - !Sub '"${SFFinalProcessing.Arn}"'
        - !Sub '"${SFCTRGenesys.Arn}"'
        - !Sub '"${SFPostCTRProcessing.Arn}"'

